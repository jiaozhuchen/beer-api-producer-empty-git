buildscript {
	ext {
		stubsRepo = "http://127.0.0.1:8081/nexus/content/repositories/cc-release/"
	}
	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://repo.spring.io/release" }
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${findProperty('bootVersion') ?: bootVersion}"
		//remove::start[]
		classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:${findProperty('verifierVersion') ?: verifierVersion}"
		// remove::end[]
	}
}

println "Boot Version [${findProperty('bootVersion') ?: bootVersion}], Cloud version [${findProperty('BOM_VERSION') ?: BOM_VERSION}], Contract version [${findProperty('verifierVersion') ?: verifierVersion}]"

group = 'com.example'
version = '0.0.1.BUILD-SNAPSHOT'

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url stubsRepo
		credentials {
			username = repoUser
			password = repoPassword
		}
	}
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/release" }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
//remove::start[]
apply plugin: 'spring-cloud-contract'
// remove::end[]
apply plugin: 'maven-publish'

dependencies {
  implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${project.findProperty('BOM_VERSION') ?: BOM_VERSION}"))
}


dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.cloud:spring-cloud-starter-stream-rabbit")

	testImplementation("org.springframework.cloud:spring-cloud-stream-test-support")
	//remove::start[]
	testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
	// remove::end[]
}

//remove::start[]
// tag::plugin[]
contracts {
		// Base package for generated tests
	basePackageForTests = "com.example"
	baseClassMappings {
		baseClassMapping(".*messaging.*", "com.example.BeerMessagingBase")
		baseClassMapping(".*rest.*", "com.example.BeerRestBase")
	}
}

/*
In this scenario we want to publish stubs to SCM whenever
the `publish` task is executed
*/
//publishStubsToScm {
//	// We want to modify the default set up of the plugin when publish stubs to scm is called
//	customize {
//		// We want to pick contracts from a Git repository
//		contractDependency {
//			stringNotation = "${project.group}:${project.name}:${project.version}"
//		}
//		/*
//		We reuse the contract dependency section to set up the path
//		to the folder that contains the contract definitions. In our case the
//		path will be /groupId/artifactId/version/contracts
//		 */
//		contractRepository {
//			repositoryUrl = "http://127.0.0.1:8081/nexus/content/repositories/stubs/"
//		}
//		// The mode can't be classpath
//		contractsMode = "LOCAL"
//	}
//}
//
//publish.dependsOn("publishStubsToScm")
//publishToMavenLocal.dependsOn("publishStubsToScm")
// end::plugin[]
// remove::end[]

publishing {

	publications {
		stubs(MavenPublication) {
			groupId 'test-stubs'
			artifactId "producer"
			version "master"
			artifact verifierStubsJar
		}
	}
	repositories {
		maven {
			credentials {
				username repoUser
				password repoPassword
			}
			url stubsRepo
		}
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}
